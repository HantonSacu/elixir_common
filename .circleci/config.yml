version: 2.1
orbs:
  jq: circleci/jq@1.9.0 # needed to install tools from docker orb
  docker: circleci/docker@0.5.0
jobs:
  build:
    parallelism: 1
    docker:
      - image: verybigthings/elixir:1.10
        environment:
          MIX_ENV: "test"
      - image: circleci/postgres:10.1-alpine
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: vbt_test
    working_directory: ~/app
    steps:
      - checkout
      - run: mix local.hex --force
      - run: mix local.rebar --force

      # main project
      - restore_cache:
          key: '{{ .Environment.CACHE_VERSION}}-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}'
      - run:
          name: "Get deps in main project"
          command: mix deps.get
      - run:
          name: "Compile project in main project"
          command: mix compile --warnings-as-errors
      - save_cache:
          key: '{{ .Environment.CACHE_VERSION}}-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}'
          paths:
            - deps
            - _build
      - jq/install
      - docker/install-dockerize
      - run:
          name: "Run linter checks in main project"
          command: mix credo --strict
      - run:
          name: "Check code format in main project"
          command: mix format --check-formatted
      - restore_cache:
          keys:
            - '{{ .Environment.CACHE_VERSION}}-dialyzer-cache-{{ .Branch }}-{{ checksum "mix.lock" }}'
            - "{{ .Environment.CACHE_VERSION}}-dialyzer-cache-{{ .Branch }}-"
            - "{{ .Environment.CACHE_VERSION}}-dialyzer-cache-"
      - run:
          name: "Restore cached dialyzer files in main project"
          command: "mkdir -p plts && ls plts | xargs -I % cp plts/% _build/test/"
      - run:
          name: "Build dialyzer plt in main project"
          command: mix dialyzer --plt
      - run:
          name: "Prepare dialyzer files to cache in main project"
          command: "mkdir -p plts && ls _build/test | grep dialyxir | xargs -I % cp _build/test/% -t plts"
      - save_cache:
          paths:
            - plts
            - ~/.mix
          key: '{{ .Environment.CACHE_VERSION}}-dialyzer-cache-{{ .Branch }}-{{ checksum "mix.lock" }}'
      - run:
          name: "Run Dialyzer checks in main project"
          command: mix dialyzer --halt-exit-status
      - run:
          name: "Run tests in main project"
          command: mix test

      # vbt_new project
      - restore_cache:
          key: '{{ .Environment.CACHE_VERSION}}-vbt_new-mix-cache-{{ .Branch }}-{{ checksum "vbt_new/mix.lock" }}'
      - run:
          name: "Get deps in vbt_new"
          command: cd vbt_new && mix deps.get
      - run:
          name: "Compile project in vbt_new"
          command: cd vbt_new && mix compile --warnings-as-errors
      - run:
          name: "Run linter checks in vbt_new"
          command: cd vbt_new && mix credo --strict
      - run:
          name: "Check code format in vbt_new"
          command: cd vbt_new && mix format --check-formatted
      - restore_cache:
          keys:
            - '{{ .Environment.CACHE_VERSION}}-vbt_new-dialyzer-cache-{{ .Branch }}-{{ checksum "vbt_new/mix.lock" }}'
            - "{{ .Environment.CACHE_VERSION}}-vbt_new-dialyzer-cache-{{ .Branch }}-"
            - "{{ .Environment.CACHE_VERSION}}-vbt_new-dialyzer-cache-"
      - run:
          name: "Restore cached dialyzer files in vbt_new"
          command: "mkdir -p vbt_new/plts && ls vbt_new/plts | xargs -I % cp vbt_new/plts/% vbt_new/_build/test/"
      - run:
          name: "Build dialyzer plt in vbt_new"
          command: cd vbt_new && mix dialyzer --plt
      - run:
          name: "Prepare dialyzer files to cache in vbt_new"
          command: "cd vbt_new && mkdir -p plts && ls _build/test | grep dialyxir | xargs -I % cp _build/test/% -t plts"
      - save_cache:
          paths:
            - vbt_new/plts
          key: '{{ .Environment.CACHE_VERSION}}-vbt_new-dialyzer-cache-{{ .Branch }}-{{ checksum "vbt_new/mix.lock" }}'
      - run:
          name: "Run Dialyzer checks in vbt_new"
          command: cd vbt_new && mix dialyzer --halt-exit-status
      - run:
          name: "Run tests in vbt_new"
          command: cd vbt_new && mix test
      - save_cache:
          key: '{{ .Environment.CACHE_VERSION}}-vbt_new-mix-cache-{{ .Branch }}-{{ checksum "vbt_new/mix.lock" }}'
          paths:
            - vbt_new/deps
            - vbt_new/_build
            - vbt_new/tmp

  update_docs:
    docker:
      - image: verybigthings/elixir:1.10
    working_directory: ~/app
    steps:
      - checkout
      - run: mix local.hex --force
      - run: mix local.rebar --force
      - restore_cache:
          key: '{{ .Environment.CACHE_VERSION}}-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}'
      - run:
          name: "Install awscli"
          command: apt-get update && apt-get install -y make awscli
      - run:
          name: "Get deps"
          command: mix deps.get
      - run:
          name: "Generate docs"
          command: mix docs
      - run:
          name: "Update docs"
          command: aws s3 sync --acl public-read --delete --region us-east-1 ./doc/ s3://vbt-common-docs/

  deploy_mix_new_archive:
    docker:
      - image: verybigthings/elixir:1.10
    working_directory: ~/app
    steps:
      - checkout
      - run: mix local.hex --force
      - run: mix local.rebar --force
      - restore_cache:
          key: '{{ .Environment.CACHE_VERSION}}-vbt_new-mix-cache-{{ .Branch }}-{{ checksum "vbt_new/mix.lock" }}'
      - run:
          name: "Install awscli"
          command: apt-get update && apt-get install -y make awscli
      - run:
          name: "Get deps"
          command: cd vbt_new && mix deps.get
      - run:
          name: "Build archive"
          command: cd vbt_new && mix archive.build
      - run:
          name: "Push archive to s3"
          command: aws s3 cp --acl public-read --region us-east-1 ./vbt_new/vbt_new-0.1.0.ez s3://vbt-common-docs/vbt_new.ez

workflows:
  version: 2
  build_feature:
    jobs:
      - build:
          filters:
            branches:
              ignore:
                - /^WIP\/.*/
      - update_docs:
          filters:
            branches:
              only:
                - master
      - deploy_mix_new_archive:
          filters:
            branches:
              only:
                - master
