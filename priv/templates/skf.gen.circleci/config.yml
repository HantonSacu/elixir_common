version: 2
jobs:
  build:
    parallelism: 1
    docker:
      - image: circleci/elixir:1.9
        environment:
          MIX_ENV: "test"
          TEST_REDIS_URL: "redis://localhost:6379/0"
          # endpoint
          HOST: "localhost"
          PORT: "4000"
          SECRET_KEY_BASE: "EvenMuchLongerSecretThatMustBeAtleast64BytesBecauseCookieStoreExpectsIt"
          # database
          DATABASE_URL: "postgres://postgres:@localhost/<%= app %>_test"
          TEST_DATABASE_URL: "postgres://postgres:@localhost/<%= app %>_test"
          DATABASE_POOL_SIZE: "10"
          DATABASE_SSL: "false"
      - image: circleci/postgres:10-alpine-postgis
        environment:
          POSTGRES_USER: "postgres"
          POSTGRES_DB: "<%= app %>_test"
          POSTGRES_PASSWORD: ""
      - image: circleci/redis:4-alpine
    working_directory: ~/app
    steps:
      - checkout
      - run: mix local.hex --force
      - run: mix local.rebar --force
      - run:
          name: Wait for PG
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Wait for Redis
          command: dockerize -wait tcp://localhost:6379 -timeout 1m
      - restore_cache:
          keys:
            -  {{ .Environment.CACHE_VERSION }}.-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
      - run:
          name: "Compile project"
          command: |
            mix deps.get
            mix compile --warnings-as-errors
      - save_cache:
          key: {{ .Environment.CACHE_VERSION }}-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
          paths:
            - deps
            - _build
      - run:
          name: "Run credo checks"
          command: mix credo list
      - run:
          name: "Check code format"
          command: mix format --check-formatted
      - restore_cache:
          keys:
            - '{{ .Environment.CACHE_VERSION}}-dialyzer-cache-{{ .Branch }}-{{ checksum "mix.lock" }}'
            - '{{ .Environment.CACHE_VERSION}}-dialyzer-cache-{{ .Branch }}-'
            - '{{ .Environment.CACHE_VERSION}}-dialyzer-cache-'
      - run:
          name: "Restore cached dialyzer files"
          command: "mkdir -p plts && ls plts | xargs -I % cp plts/% _build/$MIX_ENV/"
      - run:
          name: "Build dialyzer plt"
          command: mix dialyzer --plt
      - run:
          name: "Prepare dialyzer files to cache"
          command: "mkdir -p plts && ls _build/$MIX_ENV | grep dialyxir | xargs -I % cp _build/$MIX_ENV/% -t plts"
      - save_cache:
          paths:
            - plts
            - ~/.mix
          key: '{{ .Environment.CACHE_VERSION}}-dialyzer-cache-{{ .Branch }}-{{ checksum "mix.lock" }}'
      - run:
          name: "Run Dialyzer checks"
          command: mix dialyzer --halt-exit-status
      - run:
          name: "Create database"
          command: mix ecto.migrate
      - run:
          name: "Run DB migrations"
          command: mix ecto.migrate
      - run:
          name: "Run tests"
          command: mix test
      - run:
          name: "Check migrations reversibility"
          command: mix ecto.rollback --all
  deploy:
    docker:
      - image: buildpack-deps:trusty
    steps:
      - checkout
      - run:
          name: Deploy master to $RELEASE_ENVIRONMENT
          command: 'git push --force https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git $CIRCLE_BRANCH:master'
workflows:
  version: 2
  release_ci:
    jobs:
      - build:
          context: <%= app %>-backend-dev-env
          filters:
            branches:
              only:
                - develop
      - deploy:
          context: <%= app %>-backend-dev-env
          requires:
            - build
          filters:
            branches:
              only:
                - develop
  release_stage:
    jobs:
      - build:
          context: <%= app %>-backend-stage-env
          filters:
            branches:
              only: release
      - deploy:
          context: <%= app %>-backend-stage-env
          requires:
            - build
          filters:
            branches:
              only: release
  release_prod:
    jobs:
      - build:
          context: <%= app %>-backend-prod-env
          filters:
            branches:
              only: master
      - deploy:
          context: <%= app %>-backend-prod-env
          requires:
            - build
          filters:
            branches:
              only: master
