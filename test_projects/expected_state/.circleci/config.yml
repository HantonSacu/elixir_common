version: 2.1
orbs:
  jq: circleci/jq@1.9.0 # needed to install tools from docker orb
  docker: circleci/docker@0.5.0
  heroku: circleci/heroku@1.0.1
jobs:
  build:
    parallelism: 1
    docker:
      - image: verybigthings/elixir:1.10.2
      - image: circleci/postgres:11.2-alpine-postgis
        environment:
          POSTGRES_USER: "postgres"
          POSTGRES_DB: "skafolder_tester_test"
          POSTGRES_PASSWORD: "postgres"
    working_directory: ~/app
    steps:
      - checkout
      - run: mix local.hex --force
      - run: mix local.rebar --force
      - run:
          name: Wait for PG
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - restore_cache:
          keys:
            - '{{ .Environment.CACHE_VERSION }}-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}'
      - run:
          name: "Compile project"
          command: |
            mix deps.get
            MIX_ENV=test mix compile --warnings-as-errors
      - save_cache:
          key: '{{ .Environment.CACHE_VERSION }}-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}'
          paths:
            - deps
            - _build
      - run:
          name: "Run credo checks"
          command: mix credo list
      - run:
          name: "Check code format"
          command: mix format --check-formatted
      - restore_cache:
          keys:
            - '{{ .Environment.CACHE_VERSION}}-dialyzer-cache-{{ .Branch }}-{{ checksum "mix.lock" }}'
            - '{{ .Environment.CACHE_VERSION}}-dialyzer-cache-{{ .Branch }}-'
            - '{{ .Environment.CACHE_VERSION}}-dialyzer-cache-'
      - run:
          name: "Restore cached dialyzer files"
          command: "mkdir -p plts && ls plts | xargs -I % cp plts/% _build/test/"
      - run:
          name: "Build dialyzer plt"
          command: mix dialyzer --plt
      - run:
          name: "Prepare dialyzer files to cache"
          command: "mkdir -p plts && ls _build/test | grep dialyxir | xargs -I % cp _build/test/% -t plts"
      - save_cache:
          paths:
            - plts
            - ~/.mix
          key: '{{ .Environment.CACHE_VERSION}}-dialyzer-cache-{{ .Branch }}-{{ checksum "mix.lock" }}'
      - run:
          name: "Run Dialyzer checks"
          command: mix dialyzer --halt-exit-status
      - run:
          name: "Create database"
          command: MIX_ENV=test mix ecto.migrate
      - run:
          name: "Run DB migrations"
          command: MIX_ENV=test mix ecto.migrate
      - run:
          name: "Run tests"
          command: mix test
      - run:
          name: "Check migrations reversibility"
          command: MIX_ENV=test mix ecto.rollback --all
      - run:
        name: "Check OTP release"
        command: |
          MIX_ENV=test mix release --overwrite
          _build/test/rel/banmed/bin/check_config.sh
          _build/test/rel/banmed/bin/rollback.sh --all
          _build/test/rel/banmed/bin/migrate.sh
          _build/test/rel/banmed/bin/seed.sh
  deploy:
    docker:
      - image: buildpack-deps:trusty
    steps:
      - checkout
      - setup_remote_docker:
          version: 18.09.3
      - jq/install
      - docker/install-docker
      - heroku/install
      - run: make heroku/build-and-push
      - run: make heroku/release
workflows:
  version: 2
  release_ci:
    jobs:
      - build:
          context: skafolder_tester-backend-dev-env
          filters:
            branches:
              only:
                - develop
      - deploy:
          context: skafolder_tester-backend-dev-env
          requires:
            - build
          filters:
            branches:
              only:
                - develop
  release_stage:
    jobs:
      - build:
          context: skafolder_tester-backend-stage-env
          filters:
            branches:
              only: release
      - deploy:
          context: skafolder_tester-backend-stage-env
          requires:
            - build
          filters:
            branches:
              only: release
  release_prod:
    jobs:
      - build:
          context: skafolder_tester-backend-prod-env
          filters:
            branches:
              only: master
      - deploy:
          context: skafolder_tester-backend-prod-env
          requires:
            - build
          filters:
            branches:
              only: master
